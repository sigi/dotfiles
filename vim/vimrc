set nocompatible
filetype off

" Setup Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
" Vundle setup finished

" Now setup all the plugins/bundles
Bundle 'kchmck/vim-coffee-script'
Bundle 'godlygeek/tabular'
Bundle 'sigi/vim-vividchalk'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-endwise'
Bundle 'vim-scripts/matchit.zip'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-rails'                
Bundle 'vim-scripts/scratch.vim'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'plasticboy/vim-markdown'
Bundle 'vim-scripts/taglist.vim'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-repeat'
Bundle 'rodjek/vim-puppet'
Bundle 'scrooloose/syntastic'
Bundle 'git://git.wincent.com/command-t.git'
Bundle 'tpope/vim-haml'
Bundle 'vim-ruby/vim-ruby'
Bundle 'spiiph/vim-space'

filetype plugin indent on

" Enable 256 colors under X
if $TERM == 'xterm' || $TERM == 'screen-256color-bce'
  set t_Co=256
endif

" set a nice color scheme
if &t_Co == 256 || has('gui_running')
  colorscheme VibrantInkModified
else
" we use vividchalk for now in terminals until we fix VibrantInkModified
  colorscheme vividchalk
endif

if &t_Co > 2 || has('gui_running')
    syntax on
endif

" settings for GVim (makes .gvimrc mostly redundant)
if has('gui_running')
    set guicursor+=a:blinkon0	" turn off cursor blinking
    set guifont=Andale\ Mono\ 10
    set guioptions-=t           " disable tear-off menus
    set guioptions-=m           " disable all menus
    set guioptions-=T           " disable toolbar
else
    if &t_Co > 2
        let &t_SI = "\<Esc>]12;orange\x7"
        let &t_EI = "\<Esc>]12;red\x7"
    endif
endif

set autoindent      " carry over indent level from current line
set autoread        " re-read changed files automatically
set backspace=indent,eol,start   " allow backspacing over everything
set clipboard+=unnamed           " yank into system clipboard
set dictionary+=/usr/share/dict/words
set expandtab       " always insert spaces instead of tabs
set helpheight=15   " height of the help window when opened
set hidden          " allow hidden buffers
set history=250     " keep 50 lines of command line history
set incsearch       " do incremental searching
set keymodel=startsel,stopsel    " change visual behavior
set laststatus=2    " always display a statusline
set pumheight=15    " maximum height of completion popups
set scrolloff=3
set selection=exclusive
set shell=bash      " fish is not compatible, force bash
set shiftwidth=2    " (auto)indent by that many
set softtabstop=4
set shiftround      " round >< indenting to mod-shiftwidth
set showbreak=▶     " wrap indicator in wrap mode
set showcmd         " show incomplete commands
set showmatch       " highlight matching bracket after inserting one
set sidescroll=5    " horiz scrolls by 5 chars
set sidescrolloff=5 " horiz keeps 5 chars to the right
set smartindent     " indent smartly according to file type
set smarttab        " soft tabs according to shiftwidth
set statusline=(%n)\ %F%1*%m%*%r%h%w\ [%{&ff}]\ [%Y]\ %{fugitive#statusline()}%=%l,%c%V\ [%p%%]
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=4       " a tab is considered 4 spaces wide
set vb t_vb=        " disable all terminal bells
set virtualedit=all " allows to move the cursor everywhere
set ignorecase      " ignore case in / searches
set smartcase       " ...but only if no capitals are in the search
set shortmess+=aI   " make status line messages short
set textwidth=80    " default, overridden for other filetypes
set encoding=utf-8
set fileencoding=utf-8
set modelines=0
"set eadirection=hor " make windows equal only for hor splits
set backupdir=~/.cache/vim,~/.tmp,~/tmp,/var/tmp,/tmp " backup files
set directory=~/.cache/vim,~/.tmp,~/tmp,/var/tmp,/tmp " swap files
set wildmode=longest,list,full
set completeopt=longest,menuone
set listchars=tab:»·,trail:⊔
" ACK integration
set grepprg=ack-grep
set grepformat=%f:%l:%m

let mapleader=","

" this will open a scratch buffer (requires 'scratch.vim')
map <F12> <esc>:Scratch<cr>
map <S-F12> <esc>:Sscratch<cr>

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd") && !exists("autocommands_loaded")
  let autocommands_loaded = 1

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth'
  autocmd FileType text setlocal textwidth=75

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  " Don't do it for git commit messages --sigi
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") && bufname("%") !~ "COMMIT_EDITMSG$" |
    \   exe "normal! g`\"" |
    \ endif

  autocmd BufRead Rakefile set filetype=ruby

  augroup END
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
      command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" Set minium window size
set wmh=0
if bufwinnr(1)
  map + <C-W>_
  map - <C-W>=
endif

" Move between tabs
" Note: tabnext = gt AND tabprevious = gT
nnoremap <c-n> <esc>:tabnext<cr>
nnoremap <c-p> <esc>:tabprevious<cr>
nnoremap <silent> <C-`> :tabnew<CR>
nmap t% :tabedit %<CR>
nmap td :tabclose<CR>

" Paste from X clipboard to vim
vnoremap <C-C> "+y
noremap <C-V> <ESC>"+gP
inoremap <C-V> <ESC>"+gPi

" Follow help links with enter
nmap <buffer> <CR> <C-]>
" Back to previous help page with backspace
nmap <buffer> <BS> <C-T>

" Ommnicompletion for:
"   javascript
"   html
"   css
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" tip 908 -Quick generic option toggling http://vim.wikia.com/wiki/Quick_generic_option_toggling
" Map key to toggle opt
function MapToggle(key, opt)
 let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
 exec 'nnoremap '.a:key.' '.cmd
 exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command -nargs=+ MapToggle call MapToggle(<f-args>)

MapToggle <F2> paste
MapToggle <F3> hlsearch
MapToggle <F4> wrap
MapToggle <F6> number
" Load NERD_tree
map <F9> :NERDTreeToggle<CR>
MapToggle <F10> list
MapToggle <F11> scrollbind

" Find searched_string in directories(...)
function RailsGrep(searched_string,...)
  let s:dir_list = ''
  for dir in a:000
    let s:dir_list = s:dir_list . dir
  endfor
  execute "silent! grep --ruby " . a:searched_string . " " . s:dir_list
  botright cw
  redraw!
endfunction
" Find searched_string in all project(app and lib directories)
:command -nargs=+ Rgrep call RailsGrep('<q-args>',"app/ lib/ config/initializers vendor/plugins")
" Find  definition in the project(models,controllers,helpers and lib)
:command -nargs=1 Rgrepdef call RailsGrep("'def .*" . <q-args> . "'","app/models app/controllers app/helpers lib/ config/initializers vendor/plugins")

:nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Compact_Format = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Process_File_Always = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_WinWidth = 40
let Tlist_Inc_WinWidth = 0
let Tlist_Highlight_Tag = 1
let Tlist_Sort_Type = 'name'

nnoremap <F5> :call Ri(expand('<cword>'))<cr>
vnoremap <F5> "ry:call Ri(@r)<cr>

" VimTip 47
" Smart swapping of chars, words, paragraphs
:nnoremap <silent> gc xph
:nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
:nnoremap <silent> gr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
:nnoremap g{ {dap}p{

" Tabularize mappings
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a> :Tabularize /=><CR>
vmap <leader>a> :Tabularize /=><CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>
